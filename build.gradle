plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.modrinth.minotaur' version '2.+'
}

base {
    archivesName = archivesBaseName
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: mappingsChannel, version: mappingsVersion

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "$modId" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "$modId" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', modId, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "$modId" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

processResources {
    filesMatching('META-INF/mods.toml') {
        expand 'file': ['jarVersion': version],
                'modName': modName,
                'modId': modId,
                'modAuthors': modAuthors,
                'modCredits': modCredits,
                'modDescription': modDescription,
                'modLicense': modLicense,
                'modUpdateJSON': modUpdateJSON,
                'modURL': modURL,
                'modIssues': modIssues,
                'catalogueItemIcon': catalogueItemIcon,
                'configuredBackground': configuredBackground,
                'loaderVersionRange': loaderVersionRange,
                'minecraftVersionRange': minecraftVersionRange,
                'forgeVersionRange': forgeVersionRange,
                'libraryVersionRange': libraryVersionRange
    }
}

repositories {
    maven { url = "https://nexus.themcbrothers.net/repository/maven-blamejared" }
    maven { url = "https://nexus.themcbrothers.net/repository/maven-mod" }
    maven { url = "https://nexus.themcbrothers.net/repository/maven-k4you" }
    maven { url = "https://nexus.themcbrothers.net/repository/maven-curse" }
    maven { url = "https://nexus.themcbrothers.net/repository/maven-releases" }
    maven { url = "https://nexus.themcbrothers.net/repository/maven-snapshots" }
}

dependencies {
    minecraft "net.minecraftforge:forge:$minecraftVersion-$forgeVersion"

    // TheMCBrosLib
    implementation fg.deobf("net.themcbrothers:TheMCBrosLib:$minecraftVersion-$libraryVersion")

    // JEI
    compileOnly fg.deobf("mezz.jei:jei-$minecraftVersion-common-api:$jeiVersion")
    compileOnly fg.deobf("mezz.jei:jei-$minecraftVersion-forge-api:$jeiVersion")
    runtimeOnly fg.deobf("mezz.jei:jei-$minecraftVersion-forge:$jeiVersion")

    // Optional: Configured and Catalogue
    runtimeOnly fg.deobf("curse.maven:catalogue-459701:$catalogueFileId")
    runtimeOnly fg.deobf("curse.maven:configured-457570:$configuredFileId")
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    exclude 'net/themcbrothers/uselessmod/data/**'
    manifest {
        attributes([
                "Specification-Title"     : "uselessmod",
                "Specification-Vendor"    : "TheMCBrothers",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "TheMCBrothers",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

private String getSecret(String key) {
    def secret = System.getenv(key)
    if (secret != null) {
        return secret.trim()
    }
    
    File secretFile = file('secrets.properties')
    if (secretFile.canRead()) {
        Properties secretProps = new Properties()
        secretProps.load(new FileInputStream(secretFile))
        return secretProps.getProperty(key).toString()
    }
    return null
}

// Publish on Nexus
publishing {
    publications { PublicationContainer publicationContainer ->
        publicationContainer.register("maven", MavenPublication) { MavenPublication publication ->
            publication.artifacts = [jar]
            publication.version = "$project.minecraftVersion-$project.version"
            publication.artifactId = project.mavenName
        }
    }
    repositories {
        maven {
            credentials {
                username = getSecret('nexus_uname')
                password = getSecret('nexus_pwd')
            }

            url 'https://nexus.themcbrothers.net/repository/maven-releases/'
        }
    }
}

var curseForgeKey = getSecret('cf_key')
var modrinthToken = getSecret('modrinth_token')

// Publish on CurseForge
if (curseForgeKey != null) {
    curseforge {
        apiKey = curseForgeKey

        project {
            id = curseProjectId
            changelogType = 'markdown'
            changelog = file('changelog.md')
            releaseType = artifactType
            addGameVersion(minecraftVersion)
            mainArtifact jar
            relations {
                requiredDependency 'themcbroslib'
                optionalDependency 'jei'
            }
        }
    }
}

// Publish on Modrinth
if (modrinthToken != null) {
    modrinth {
        token = modrinthToken
        projectId = modrinthProject
        versionType = artifactType
        uploadFile = jar
        var changes = file('changelog.md').text
        changelog = changes.substring(changes.indexOf('\n'), changes.indexOf('\n\n'))
        dependencies {
            required.project 'themcbroslib'
            optional.project 'jei'
        }
    }
}
