plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.+'
    id 'me.modmuss50.mod-publish-plugin' version '0.4.+'
}

version = mod_version
group = mod_group_id

repositories {
    maven { url = "https://nexus.themcbrothers.net/repository/maven-mod-dependencies" }
    mavenLocal()
}

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
    }
}

runs {
    // applies to all the run configs below
    configureEach {
        workingDirectory project.file('run')

        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'neoforge.enabledGameTestNamespaces', mod_id
    }

    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', mod_id
        programArgument '--nogui'
    }

    data {
        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    // NeoForge
    implementation "net.neoforged:neoforge:$neo_version"

    // TheMCBrosLib
    implementation "net.themcbrothers:TheMCBrosLib:$minecraft_version-$lib_version"
}

tasks.named('processResources', ProcessResources).configure {
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand project: project
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    exclude 'net/themcbrothers/uselessmod/data/**'
    archiveAppendix = minecraft_version
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

// Publish on Nexus
publishing {
    publications { PublicationContainer publicationContainer ->
        publicationContainer.register("maven", MavenPublication) { MavenPublication publication ->
            publication.artifacts = [jar]
            publication.version = "$project.minecraft_version-$project.version"
            publication.artifactId = project.maven_name
        }
    }
    repositories {
        maven {
            credentials {
                username = System.getenv('nexus_uname')
                password = System.getenv('nexus_pwd')
            }

            url 'https://nexus.themcbrothers.net/repository/maven-releases/'
        }
    }
}

    var curseForgeKey = providers.environmentVariable('cf_key')
    var modrinthToken = providers.environmentVariable('modrinth_token')

publishMods {
    file = tasks.jar.archiveFile
    type = artifact_type == 'release' ? STABLE : artifact_type == 'beta' ? BETA : ALPHA

    var changes = file('changelog.md').text

    modLoaders.add("forge")
    modLoaders.add("neoforge")

    // Publish to CurseForge
    if (curseForgeKey.isPresent()) {
        curseforge {
            accessToken = curseForgeKey
            projectId = curse_project_id
            changelog = changes
            minecraftVersions.add(minecraft_version)

            requires {
                slug = "themcbroslib"
            }

            optional {
                slug = "jei"
            }
        }
    }

    // Publish to Modrinth
    if (modrinthToken.isPresent()) {
        modrinth {
            accessToken = modrinthToken
            projectId = modrinth_project_id
            displayName = version
            changelog = changes.substring(changes.indexOf('\n'), changes.indexOf('\n\n'))
            minecraftVersions.add(minecraft_version)

            requires {
                slug = "themcbroslib"
            }

            optional {
                slug = "jei"
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
