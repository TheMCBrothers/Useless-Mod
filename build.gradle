plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'me.modmuss50.mod-publish-plugin' version '0.4.+'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: mapping_channel, version: mapping_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        data {
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = "https://nexus.themcbrothers.net/repository/maven-blamejared" }
    maven { url = "https://nexus.themcbrothers.net/repository/maven-mod" }
    maven { url = "https://nexus.themcbrothers.net/repository/maven-k4you" }
    maven { url = "https://nexus.themcbrothers.net/repository/maven-curse" }
    maven { url = "https://nexus.themcbrothers.net/repository/maven-releases" }
    maven { url = "https://nexus.themcbrothers.net/repository/maven-snapshots" }
}

dependencies {
    minecraft "net.minecraftforge:forge:$minecraft_version-$forge_version"

    // TheMCBrosLib
    implementation fg.deobf("net.themcbrothers:TheMCBrosLib:$minecraft_version-$lib_version")

    // JEI
    compileOnly fg.deobf("mezz.jei:jei-$minecraft_version-common-api:$jei_version")
    compileOnly fg.deobf("mezz.jei:jei-$minecraft_version-forge-api:$jei_version")
    runtimeOnly fg.deobf("mezz.jei:jei-$minecraft_version-forge:$jei_version")

    // Optional: Configured and Catalogue
    if (!catalogue_file_id.isEmpty()) runtimeOnly fg.deobf("curse.maven:catalogue-459701:$catalogue_file_id")
    if (!configured_file_id.isEmpty()) runtimeOnly fg.deobf("curse.maven:configured-457570:$configured_file_id")
}

tasks.named('processResources', ProcessResources).configure {
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand project: project
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    exclude 'net/themcbrothers/uselessmod/data/**'
    archiveAppendix = minecraft_version
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

// Publish on Nexus
publishing {
    publications { PublicationContainer publicationContainer ->
        publicationContainer.register("maven", MavenPublication) { MavenPublication publication ->
            publication.artifacts = [jar]
            publication.version = "$project.minecraft_version-$project.version"
            publication.artifactId = project.maven_name
        }
    }
    repositories {
        maven {
            credentials {
                username = System.getenv('nexus_uname')
                password = System.getenv('nexus_pwd')
            }

            url 'https://nexus.themcbrothers.net/repository/maven-releases/'
        }
    }
}

    var curseForgeKey = providers.environmentVariable('cf_key')
    var modrinthToken = providers.environmentVariable('modrinth_token')

publishMods {
    file = tasks.jar.archiveFile
    type = artifact_type == 'release' ? STABLE : artifact_type == 'beta' ? BETA : ALPHA

    var changes = file('changelog.md').text

    modLoaders.add("forge")
    modLoaders.add("neoforge")

    // Publish to CurseForge
    if (curseForgeKey.isPresent()) {
        curseforge {
            accessToken = curseForgeKey
            projectId = curse_project_id
            changelog = changes
            minecraftVersions.add(minecraft_version)

            requires {
                slug = "themcbroslib"
            }

            optional {
                slug = "jei"
            }
        }
    }

    // Publish to Modrinth
    if (modrinthToken.isPresent()) {
        modrinth {
            accessToken = modrinthToken
            projectId = modrinth_project_id
            displayName = version
            changelog = changes.substring(changes.indexOf('\n'), changes.indexOf('\n\n'))
            minecraftVersions.add(minecraft_version)

            requires {
                slug = "themcbroslib"
            }

            optional {
                slug = "jei"
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
